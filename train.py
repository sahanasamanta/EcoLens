# -*- coding: utf-8 -*-
"""yolov8insight.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-R6xq1ftJAjAbHq8oyjRadxkcyBAjBr4
"""

from google.colab import drive
drive.mount('/content/drive')

import zipfile
import os
zip_path = '/content/Waste Detection.v2i.yolov12.zip'
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall('/content/dataset')
os.listdir('/content/dataset')

!pip install ultralytics

from ultralytics import YOLO

def train_yolo(data_yaml, epochs=10, imgsz=640, batch=16, weights="yolov8n.pt", project="runs/detect", name="plastic_waste"):
    model = YOLO(weights)
    model.train(data=data_yaml, epochs=epochs, imgsz=imgsz, batch=batch, project=project, name=name)
    print(f"Training complete. Check {project}/{name}/weights/best.pt")

data_yaml="/content/dataset/data.yaml"

train_yolo(data_yaml, epochs=50, imgsz=640, batch=16, weights="yolov8n.pt", project="runs/detect", name="plastic_waste")

from ultralytics import YOLO

# Load the best trained model
best_model_path = "/content/runs/detect/plastic_waste/weights/best.pt"
model = YOLO(best_model_path)

# Validate the model
metrics = model.val()

# You can access the metrics like this:
print("Overall Precision:", metrics.box.p[-1])
print("Recall:", metrics.box.r)
print("mAP50:", metrics.box.map50)
print("mAP50-95:", metrics.box.map)

# Note: F1 score is not directly provided, but mAP50 is a good proxy for overall performance.

from ultralytics import YOLO
from IPython.display import Image, display
import os

# Load the best trained model
best_model_path = "/content/runs/detect/plastic_waste/weights/best.pt"
model = YOLO(best_model_path)

# Specify the path to your test image or directory
test_source = "/content/test.jpg" # Replace with your actual test data path

# Run inference on the test data and save the results
results = model.predict(source=test_source, save=True, project="runs/detect", name="inference_results")

# Get the path to the saved image
# The results are saved in a directory named based on the 'name' parameter
# Assuming you are testing a single image, the result will be in the 'inference_results' directory
# and the image name will be the same as the test_source image name.
# This assumes the default saving behavior of YOLO.
saved_image_dir = results[0].save_dir # Get the actual save directory from the results
saved_image_path = os.path.join(saved_image_dir, os.path.basename(test_source))

# Display the saved image
print(f"Predicted image saved at: {saved_image_path}")
display(Image(filename=saved_image_path))



from IPython.display import Image, display
import os

# The validation results, including the confusion matrix, are saved
# in a directory created by the model.val() command.
# You can find the path to this directory in the output of cell 5d602ad9.
# Look for the line starting with "Results saved to".
# Let's assume the directory is '/content/runs/detect/val' or similar.
# Replace this with the actual path from your output if it's different.
# Based on the output of cell 5d602ad9, the results were saved to /content/runs/detect/val2
val_results_dir = "/content/runs/detect/val"

# The confusion matrix image is typically named 'confusion_matrix.png'
confusion_matrix_path = os.path.join(val_results_dir, 'confusion_matrix.png')

# Check if the file exists before trying to display it
if os.path.exists(confusion_matrix_path):
    print(f"Displaying confusion matrix from: {confusion_matrix_path}")
    display(Image(filename=confusion_matrix_path))
else:
    print(f"Confusion matrix not found at: {confusion_matrix_path}")
    print("Please check the output of cell 5d602ad9 to find the correct validation results directory.")

